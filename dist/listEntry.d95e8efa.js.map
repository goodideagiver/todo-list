{"version":3,"sources":["src/script/listEntry.js"],"names":["getListEntryIndex","clickedElement","clickedEntry","closest","allEntriesInCurrentList","parentElement","children","foundIndex","i","length","createUpDownButtons","buttonsContainer","createCustomNode","icon","customClassname","saveOnClick","up","callbackFunc","moveListItem","down","addElementsToContainer","editModeRestore","element","oldText","save","listEntry","inputValue","querySelector","value","trim","userText","showModal","lowerText","editedEntry","createListEntry","insertAdjacentElement","remove","createEditModeButtons","confirm","decline","wrapper","createEditModeElements","editModeWrapper","listInput","input","buttonsWrapper","editModeLauncher","e","editButton","target","listEntryUserText","innerText","innerHTML","appendChild","click","focus","createEditButton","buttonClassTypes","clickedButton","listArray","listItemIndex","clickedButtonType","className","insertBefore","firstElementChild","nextSibling","removeEntry","deleteButton","saveChanges","createDeleteEntryButton","addEventListener","thatButton","yesNo","yesFunc","createEntryButtons","entryButtonsContainer","userInputText","entryLine","draggable","entryText","text","addDraggingFunc","sortEntryList","disableEditMode","list","entries","querySelectorAll","entryArray","push","sort"],"mappings":"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","file":"listEntry.d95e8efa.js","sourceRoot":"..","sourcesContent":["const getListEntryIndex = clickedElement => {\r\n\tconst clickedEntry = clickedElement.closest('.list-entry');\r\n\tconst allEntriesInCurrentList = clickedEntry.parentElement.children;\r\n\tlet foundIndex;\r\n\tfor (let i = 0; i < allEntriesInCurrentList.length; i++) {\r\n\t\tfoundIndex = allEntriesInCurrentList[i] === clickedEntry ? i : 'match not found';\r\n\t\tif (i === foundIndex) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn foundIndex;\r\n};\r\n\r\nconst createUpDownButtons = () => {\r\n\tconst buttonsContainer = createCustomNode('div', {\r\n\t\ticon: null,\r\n\t\tcustomClassname: 'up-down-container',\r\n\t\tsaveOnClick: true,\r\n\t});\r\n\tconst up = createCustomNode('button', {\r\n\t\ticon: '<i class=\"fas fa-angle-up\"></i>',\r\n\t\tcustomClassname: 'up-list-btn',\r\n\t\tcallbackFunc: moveListItem,\r\n\t\tsaveOnClick: true,\r\n\t});\r\n\tconst down = createCustomNode('button', {\r\n\t\ticon: '<i class=\"fas fa-angle-down\"></i>',\r\n\t\tcustomClassname: 'down-list-btn',\r\n\t\tcallbackFunc: moveListItem,\r\n\t});\r\n\taddElementsToContainer(buttonsContainer, [up, down]);\r\n\treturn buttonsContainer;\r\n};\r\n\r\nconst editModeRestore = (element, oldText, save) => {\r\n\tconst listEntry = element.closest('.list-entry');\r\n\tconst inputValue = listEntry.querySelector('input').value.trim();\r\n\tlet userText;\r\n\tif (save && inputValue.trim().length > 0) {\r\n\t\tuserText = inputValue;\r\n\t} else if (save) {\r\n\t\tuserText = oldText;\r\n\t\tshowModal('Warning!', { lowerText: 'You cant set entry to be empty!' });\r\n\t} else {\r\n\t\tuserText = oldText;\r\n\t}\r\n\tconst editedEntry = createListEntry(userText);\r\n\t// listEntry.parentElement.insertBefore(editedEntry, listEntry);\r\n\tlistEntry.insertAdjacentElement('beforebegin', editedEntry);\r\n\tlistEntry.remove();\r\n};\r\n\r\nconst createEditModeButtons = oldText => {\r\n\tconst confirm = createCustomNode('button', {\r\n\t\ticon: '<i class=\"fas fa-check\"></i>',\r\n\t\tcallbackFunc: () => editModeRestore(confirm, oldText, true),\r\n\t\tsaveOnClick: true,\r\n\t});\r\n\tconst decline = createCustomNode('button', {\r\n\t\ticon: '<i class=\"fas fa-times\"></i>',\r\n\t\tcallbackFunc: () => editModeRestore(decline, oldText, false),\r\n\t\tsaveOnClick: true,\r\n\t});\r\n\tconst wrapper = createCustomNode('section', {\r\n\t\tcustomClassname: 'edit-mode-buttons',\r\n\t});\r\n\taddElementsToContainer(wrapper, [confirm, createUpDownButtons(), decline]);\r\n\treturn wrapper;\r\n};\r\n\r\nconst createEditModeElements = userText => {\r\n\tconst editModeWrapper = createCustomNode('div', {\r\n\t\tcustomClassname: 'edit-mode',\r\n\t});\r\n\tconst listInput = createCustomNode('input', {\r\n\t\tinput: userText,\r\n\t});\r\n\tconst buttonsWrapper = createEditModeButtons(userText);\r\n\taddElementsToContainer(editModeWrapper, [listInput, buttonsWrapper]);\r\n\treturn editModeWrapper;\r\n};\r\n\r\nconst editModeLauncher = e => {\r\n\tconst editButton = e.target;\r\n\tconst listEntry = editButton.closest('.list-entry');\r\n\tconst listEntryUserText = listEntry.querySelector('.user-entry-text').innerText;\r\n\tlistEntry.innerHTML = '';\r\n\tlistEntry.appendChild(createEditModeElements(listEntryUserText));\r\n\tlistEntry.querySelector('input').click();\r\n\tlistEntry.querySelector('input').focus();\r\n};\r\n\r\nconst createEditButton = () =>\r\n\tcreateCustomNode('button', {\r\n\t\ticon: '<i class=\"fas fa-wrench\"></i>',\r\n\t\tcustomClassname: 'entry-edit-button',\r\n\t\tcallbackFunc: editModeLauncher,\r\n\t});\r\n\r\nconst moveListItem = e => {\r\n\tconst buttonClassTypes = {\r\n\t\tup: 'up-list-btn',\r\n\t\tdown: 'down-list-btn',\r\n\t};\r\n\tconst clickedButton = e.target;\r\n\tconst listArray = clickedButton.closest('.list-entry-container').children;\r\n\tconst listItemIndex = getListEntryIndex(clickedButton);\r\n\tconst clickedButtonType = clickedButton.closest('button').className;\r\n\tconst clickedEntry = clickedButton.closest('.list-entry');\r\n\r\n\tif (listArray.length === 1) {\r\n\t\tshowModal('Warning!', { lowerText: `Cant move entry when there is only one.` });\r\n\t\treturn;\r\n\t} else if (\r\n\t\tlistArray.length - 1 === listItemIndex &&\r\n\t\tclickedButtonType === buttonClassTypes.down\r\n\t) {\r\n\t\tclickedEntry.parentElement.insertBefore(\r\n\t\t\tclickedEntry,\r\n\t\t\tclickedEntry.parentElement.firstElementChild\r\n\t\t);\r\n\t\treturn;\r\n\t} else if (listItemIndex === 0 && clickedButtonType === buttonClassTypes.up) {\r\n\t\tclickedEntry.parentElement.appendChild(clickedEntry);\r\n\t\treturn;\r\n\t}\r\n\r\n\tswitch (clickedButtonType) {\r\n\t\tcase buttonClassTypes.up:\r\n\t\t\tclickedEntry.parentElement.insertBefore(\r\n\t\t\t\tclickedEntry,\r\n\t\t\t\tlistArray[listItemIndex - 1]\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tcase buttonClassTypes.down:\r\n\t\t\tclickedEntry.parentElement.insertBefore(\r\n\t\t\t\tlistArray[listItemIndex].nextSibling,\r\n\t\t\t\tclickedEntry\r\n\t\t\t);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn;\r\n\t}\r\n};\r\n\r\nconst removeEntry = deleteButton => {\r\n\tdeleteButton.closest('.list-entry').remove();\r\n\tsaveChanges();\r\n};\r\n\r\nconst createDeleteEntryButton = () => {\r\n\tconst deleteButton = createCustomNode('button', {\r\n\t\ticon: '<i class=\"fas fa-trash-alt\"></i>',\r\n\t\tcustomClassname: 'delete-entry-button',\r\n\t});\r\n\tdeleteButton.addEventListener('click', e => {\r\n\t\tconst thatButton = e.target;\r\n\t\tshowModal('Confirmation needed', {\r\n\t\t\tlowerText: 'Are you sure you want to delete this entry?',\r\n\t\t\tyesNo: true,\r\n\t\t\tyesFunc: () => removeEntry(thatButton),\r\n\t\t});\r\n\t});\r\n\treturn deleteButton;\r\n};\r\n\r\nconst createEntryButtons = () => {\r\n\tconst entryButtonsContainer = createCustomNode('section', {\r\n\t\tcustomClassname: 'list-entry-buttons',\r\n\t});\r\n\taddElementsToContainer(entryButtonsContainer, [\r\n\t\tcreateEditButton(),\r\n\t\tcreateUpDownButtons(),\r\n\t\tcreateDeleteEntryButton(),\r\n\t]);\r\n\treturn entryButtonsContainer;\r\n};\r\n\r\nconst createListEntry = userInputText => {\r\n\tconst entryLine = createCustomNode('div', {\r\n\t\tcustomClassname: 'list-entry',\r\n\t\tdraggable: true,\r\n\t});\r\n\tconst entryText = createCustomNode('section', {\r\n\t\tcustomClassname: 'user-entry-text',\r\n\t\ttext: userInputText,\r\n\t});\r\n\taddElementsToContainer(entryLine, [entryText, createEntryButtons()]);\r\n\taddDraggingFunc(entryLine);\r\n\treturn entryLine;\r\n};\r\n\r\nconst sortEntryList = clickedElement => {\r\n\tdisableEditMode();\r\n\tconst list = clickedElement\r\n\t\t.closest('.list-container')\r\n\t\t.querySelector('.list-entry-container');\r\n\tconst entries = list.querySelectorAll('.user-entry-text');\r\n\tlet entryArray = [];\r\n\tif (entries) {\r\n\t\tfor (let i = 0; i < entries.length; i++) {\r\n\t\t\tentryArray.push(entries[i].innerText);\r\n\t\t}\r\n\t}\r\n\tentryArray.sort();\r\n\tlist.innerHTML = '';\r\n\tfor (let i = 0; i < entryArray.length; i++) {\r\n\t\tlist.appendChild(createListEntry(entryArray[i]));\r\n\t}\r\n\tsaveChanges();\r\n};\r\n"]}